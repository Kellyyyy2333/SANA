#include <string>
#include <iostream>

#include "graphLoader.hpp"
#include "../Timer.hpp"

using namespace std;

/*
The program requires that there exist the network files in GW format
in networks/g1name/g1name.gw and networks/g1name/g2name.gw.

The -g1 and -g2 arguments allow you to specify g1name and g2name directly.
These arguments assume that the files already exist.

The -fg1 and -fg2 arguments allow you to specify external files containing
the graph definitions (in either GW or edge list format). If these
arguments are used, -g1 and -g2 are ignored. g1Name and g2Name are deduced
from the file names (by removing the path and the extension). Then,
the network definitions are parsed and the necessary network files are created.

*/
void initGraphs(Graph& G1, Graph& G2, ArgumentParser& args) {
    string fg1 = args.strings["-fg1"], fg2 = args.strings["-fg2"];
    createFolder("networks");
    string g1Name, g2Name;
    createFolder("alignments/"+g1Name+"_"+g2Name);
    if (fg1 != "") {
        g1Name = extractFileNameNoExtension(fg1);
    } else {
        g1Name = args.strings["-g1"];
    }
    if (fg2 != "") {
        g2Name = extractFileNameNoExtension(fg2);
    } else {
        g2Name = args.strings["-g2"];
    }

    string g1Folder, g2Folder;
    g1Folder = "networks/"+g1Name;
    g2Folder = "networks/"+g2Name;
    createFolder(g1Folder);
    createFolder(g2Folder);
    createFolder(g1Folder+"/autogenerated");
    createFolder(g2Folder+"/autogenerated");

    string g1GWFile, g2GWFile;
    g1GWFile = g1Folder+"/"+g1Name+".gw";
    if (fileExists(g1GWFile) and fg1 != "") {
        cerr << "Warning: argument of -fg1 (" << fg1 <<
            ") ignored because there already exists a network named " << g1Name << endl;
    }
    g2GWFile = g2Folder+"/"+g2Name+".gw";
    if (fileExists(g2GWFile) and fg2 != "") {
        cerr << "Warning: argument of -fg2 (" << fg2 <<
            ") ignored because there already exists a network named " << g2Name << endl;
    }

    if (not fileExists(g1GWFile)) {
        if (fg1 != "") {
            if (fileExists(fg1)) {
                if (fg1.size() > 3 and fg1.substr(fg1.size()-3) == ".gw") {
                    exec("cp "+fg1+" "+g1GWFile);
                } else {
                    Graph::edgeList2gw(fg1, g1GWFile);
                }
            } else {
                error("File not found: "+fg1);
            }
        } else {
            error("File not found: "+g1GWFile);
        }
    }
    if (not fileExists(g2GWFile)) {
        if (fg2 != "") {
            if (fileExists(fg2)) {
                if (fg2.size() > 3 and fg2.substr(fg2.size()-3) == ".gw") {
                    exec("cp "+fg2+" "+g2GWFile);
                } else {
                    Graph::edgeList2gw(fg2, g2GWFile);
                }
            } else {
                error("File not found: "+fg2);
            }
        } else {
            error("File not found: "+g2GWFile);
        }
    }

    cerr << "Initializing graphs... ";
    Timer T;
    T.start();
    G1 = Graph::loadGraph(g1Name);
    G2 = Graph::loadGraph(g2Name);

    double rewiredFraction = args.doubles["-rewire"];
    if (rewiredFraction > 0) {
        if (rewiredFraction > 1) error("Cannot rewire more than 100% of the edges");
        G2.rewireRandomEdges(rewiredFraction);
    }

    if (G1.getNumNodes() > G2.getNumNodes()) error("G2 has less nodes than G1");
    if (G1.getNumEdges() == 0 or G2.getNumEdges() == 0) error ("One of the networks has 0 edges");
    cerr << "done (" << T.elapsedString() << ")" << endl;
}
