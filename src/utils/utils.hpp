#ifndef UTILS_H
#define UTILS_H
#include <vector>
#include <map>
#include <ostream>
#include <unordered_map>
#include "stdiobuf.hpp"
#include "templateUtils.cpp"

using namespace std;

//Auxiliary functions **oblivious** to SANA or network alignment but that can come helpful.

//folder where any part of the codebase can save autogenerated files
extern const string AUTOGENEREATED_FILES_FOLDER;

typedef uint16_t ushort;
typedef uint32_t uint;

bool myNan(double x);
double randDouble();
int randInt(int low, int high);
int randMod(int n);

string extractDecimals(double value, int count);
string toLowerCase(const string& s);
vector<string> split(const string& s, char c);

double vectorMean(const vector<double>& v);
double vectorMax(const vector<double>& v);
double vectorMin(const vector<double>& v);
double vectorSum(const vector<double>& v);
void normalizeWeights(vector<double>& weights);

void randomShuffle(vector<uint>& v);
void randomShuffle(vector<vector<string>>& v);

void printTable(const vector<vector<string>>& table, int colSeparation, ostream& stream);
void writeDataToFile(const vector<vector<string>>& data, string fileName, bool useTabs = false);

string currentDateTime();

bool fileExists(const string& filename);
void checkFileExists(const string& filename);
void deleteFile(string name);
bool folderExists(string folderName);
void createFolder(string folderName);
vector<string> getFilesInDirectory(const string &directory); //don't include the trailing '/' when calling it

string extractFileName(const string& s); //strips path (anything up to the last '/')
string extractFileNameNoExtension(const string& s); //strips path and file extension
string autocompleteFileName(const string dir, const string fileNamePrefix);
void addUniquePostfixToFilename(string& name, const string& extension);
string getUncompressedFileExtension(const string& fileName);
string getDecompressionProgram(const string& fileName);
FILE* decompressFile(const string& decompProg, const string& fileName);

uint numLinesInFile(const string& fileName); //if the file ends in '\n', it counts as a new line
vector<string> fileToStrings(const string& fileName, bool asLines = false);
vector<vector<string>> fileToStringsByLines(const string& fileName);
stdiobuf readFileAsStreamBuffer(const string& fileName);
FILE* readFileAsFilePointer(const string& fileName, bool& piped);
void closeFile(FILE* fp, const bool& isPiped);

void skipWordInStream(istream& is, const string& str);
bool canSkipWordInStream(istream& is, const string& str);

string exec(string cmd);
string execWithoutPrintingErr(string cmd);
void execPrintOutput(string cmd);

#endif /* UTILS_H */